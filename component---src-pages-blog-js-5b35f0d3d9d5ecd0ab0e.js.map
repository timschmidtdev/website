{"version":3,"sources":["webpack:///./src/pages/blog.js"],"names":["BlogListContainer","styled","div","PostContainerLink","a","StyledImage","Img","PostDetails","StyledH1","h1","TagButtons","StyledButton","button","Blog","data","postData","posts","allContentfulPost","edges","tags","allContentfulTag","map","tag","node","title","sort","useState","state","setState","description","headerText","onClick","e","event","filter","post","tagReference","find","target","textContent","url","toLowerCase","split","join","href","alt","titleImage","fluid","subTitle"],"mappings":"igpBAQA,IAAMA,EAAoBC,IAAOC,IAAV,KAEjBC,EAAoBF,IAAOG,EAAV,KASjBC,EAAcJ,YAAOK,IAAPL,CAAH,KAUXM,EAAcN,IAAOC,IAAV,KAOXM,EAAWP,IAAOQ,GAAV,KAORC,EAAaT,IAAOC,IAAV,KAMVS,EAAeV,IAAOW,OAAV,KAuFHC,UAnDF,WACX,IAAMC,EAAI,OACJC,EAAW,CACfC,MAAOF,EAAKG,kBAAkBC,MAC9BC,KAAML,EAAKM,iBAAiBF,MAAMG,KAAI,SAAAC,GAAG,OAAIA,EAAIC,KAAKC,SAAOC,QAJ9C,EAMSC,mBAASX,GAA5BY,EANU,KAMHC,EANG,KAiBjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKJ,MAAM,OAAOK,YAAY,4CAC9B,kBAAC,IAAD,CAAQC,WAAW,SACnB,kBAACpB,EAAD,KACGiB,EAAMR,KAAKE,KAAI,SAAAC,GACd,OACE,kBAACX,EAAD,CAAcoB,QAAS,SAAAC,GAAC,OAAIJ,GAjBdK,EAiBuCD,EAbzC,CAClBhB,MAJmBD,EAASC,MAAMkB,QAAO,SAAAC,GAAI,OAC7CA,EAAKZ,KAAKa,aAAaC,MAAK,SAAAf,GAAG,OAAIA,EAAIE,QAAUS,EAAMK,OAAOC,kBAI9DpB,KAAMQ,EAAMR,QANQ,IAAAc,IAkBXX,OAKT,kBAACtB,EAAD,KACG2B,EAAMX,MAAMK,KAAI,SAAAc,GACf,IAAMK,EAAG,IAAOL,EAAKZ,KAAKC,MAAMiB,cAAcC,MAAM,KAAKC,KAAK,KAC9D,OACE,kBAACxC,EAAD,CAAmByC,KAAMJ,GACvB,kBAACnC,EAAD,CACEwC,IAAKV,EAAKZ,KAAKuB,WAAWtB,MAC1BuB,MAAOZ,EAAKZ,KAAKuB,WAAWC,QAE9B,kBAACxC,EAAD,KACE,kBAACC,EAAD,KAAW2B,EAAKZ,KAAKC,OACrB,4BAAKW,EAAKZ,KAAKyB","file":"component---src-pages-blog-js-5b35f0d3d9d5ecd0ab0e.js","sourcesContent":["import React, { useState } from \"react\"\nimport Layout from \"../components/layout\"\nimport Header from \"../components/header\"\nimport styled from \"styled-components\"\nimport Img from \"gatsby-image\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport SEO from \"../components/seo\"\n\nconst BlogListContainer = styled.div``\n\nconst PostContainerLink = styled.a`\n  margin: 2rem 0;\n  display: flex;\n  flex-direction: column;\n  @media (min-width: 45rem) {\n    flex-direction: row;\n  }\n`\n\nconst StyledImage = styled(Img)`\n  min-width: 100%;\n  height: 10rem;\n  border-radius: 0.2rem;\n  @media (min-width: 45rem) {\n    min-width: 20rem;\n    margin-right: 2rem;\n  }\n`\n\nconst PostDetails = styled.div`\n  text-align: center;\n  @media (min-width: 45rem) {\n    text-align: left;\n  }\n`\n\nconst StyledH1 = styled.h1`\n  margin: 1rem;\n  @media (min-width: 45rem) {\n    margin: auto;\n  }\n`\n\nconst TagButtons = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`\n\nconst StyledButton = styled.button``\n\nconst blogQuery = graphql`\n  query {\n    allContentfulPost {\n      edges {\n        node {\n          id\n          subTitle\n          title\n          titleImage {\n            title\n            fluid(quality: 10) {\n              base64\n              srcWebp\n              srcSetWebp\n            }\n          }\n          tagReference {\n            id\n            title\n          }\n        }\n      }\n    }\n    allContentfulTag {\n      edges {\n        node {\n          title\n          id\n        }\n      }\n    }\n  }\n`\n\nconst Blog = () => {\n  const data = useStaticQuery(blogQuery)\n  const postData = {\n    posts: data.allContentfulPost.edges,\n    tags: data.allContentfulTag.edges.map(tag => tag.node.title).sort(),\n  }\n  const [state, setState] = useState(postData)\n  const changedPostData = event => {\n    const changedPosts = postData.posts.filter(post =>\n      post.node.tagReference.find(tag => tag.title === event.target.textContent)\n    )\n    const newPostData = {\n      posts: changedPosts,\n      tags: state.tags,\n    }\n    return newPostData\n  }\n  return (\n    <Layout>\n      <SEO title=\"Blog\" description=\"A blog covering a broad range of topics\" />\n      <Header headerText=\"Blog\" />\n      <TagButtons>\n        {state.tags.map(tag => {\n          return (\n            <StyledButton onClick={e => setState(changedPostData(e))}>\n              {tag}\n            </StyledButton>\n          )\n        })}\n      </TagButtons>\n      <BlogListContainer>\n        {state.posts.map(post => {\n          const url = `/${post.node.title.toLowerCase().split(\" \").join(\"-\")}`\n          return (\n            <PostContainerLink href={url}>\n              <StyledImage\n                alt={post.node.titleImage.title}\n                fluid={post.node.titleImage.fluid}\n              />\n              <PostDetails>\n                <StyledH1>{post.node.title}</StyledH1>\n                <h4>{post.node.subTitle}</h4>\n              </PostDetails>\n            </PostContainerLink>\n          )\n        })}\n      </BlogListContainer>\n    </Layout>\n  )\n}\n\nexport default Blog\n"],"sourceRoot":""}